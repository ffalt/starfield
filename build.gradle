import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
import se.bjurr.gitchangelog.api.InclusivenessStrategy
import se.bjurr.gitchangelog.api.GitChangelogApi

// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.androidApplication) apply false
    alias(libs.plugins.gitChangelog)
    alias(libs.plugins.grGit)
}

def templateChangelogContent = """# Changelog Starfield Live Wallpaper
{{#tags}}

{{#ifEquals name "Unreleased"}}
## Unreleased
{{else}}
## [{{name}}](https://github.com/ffalt/starfield/compare/{{name}}) ({{tagDate .}})
{{/ifEquals}}

  {{#ifContainsType commits type='feat'}}
### Features

    {{#commits}}
      {{#ifCommitType . type='feat'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://github.com/ffalt/starfield/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}

  {{#ifContainsType commits type='fix'}}
### Bug Fixes

    {{#commits}}
      {{#ifCommitType . type='fix'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://github.com/ffalt/starfield/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}
{{/tags}}
 """

def templateReleaseLogContent = """{{#tags}}{{#ifContainsType commits type='feat'}}## Features

    {{#commits}}
      {{#ifCommitType . type='feat'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://github.com/ffalt/starfield/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}
  {{#ifContainsType commits type='fix'}}

## Bug Fixes

    {{#commits}}
      {{#ifCommitType . type='fix'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://github.com/ffalt/starfield/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}

## Full Changelog

https://github.com/ffalt/starfield/compare/PREVIOUS...{{name}}
{{/tags}}
"""

def templateFdroidChangelogContent = """{{#tags}}
    {{#commits}}
{{#ifCommitType . type='feat'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}}
{{/ifCommitType}}{{#ifCommitType . type='fix'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}}
{{/ifCommitType}}{{/commits}}
{{/tags}}
"""

static def calculateAndroidVersionCode(versionName) {
    def (major, minor, patch, build) = versionName.replace("v", "").tokenize('.')
    (major, minor, patch, build) = [major, minor, patch, build].collect { it == null ? 0 : it.toInteger() }
    return (major * 1000 * 1000 * 1000) + (minor * 1000 * 1000) + (patch * 1000) + build
}

tasks.register('gitReleaseNotesTask', GitChangelogTask) {
    def prev_tag = "git tag --sort=-creatordate | head -n 2 | tail -n 1".execute().text.replace("\n", "").replace("\r", "").trim()
    if (prev_tag == "") {
        prev_tag = project.version
    }
    println "Generating Release notes for ${project.version} compared to ${prev_tag}"
    toRevision = project.version
    fromRevisionStrategy = InclusivenessStrategy.EXCLUSIVE
    fromRevision = prev_tag
    file = new File("${rootDir}/RELEASE_NOTES.md")
    prependToFile = false // false will replace the file, true will prepend content
    templateContent = templateReleaseLogContent.replace("PREVIOUS", prev_tag)
}

##tasks.register('gitChangelogTask', GitChangelogTask) {
    fromRevision = "440bdfdf94c09ef4edf1885b25852078a66d6332"
    toRevision = "HEAD"
    templateContent = templateChangelogContent
}

tasks.register('bumpReleaseVersion') {
    if (!grgit.status().clean) {
        throw new GradleException('Git repository is dirty. Commit your changes first!')
    }

    // get next version
    def (major, minor, patch) = project.version.replace("v", "").tokenize('.')
    (major, minor, patch) = [major, minor, patch].collect { it.toInteger() }
    def nextVersion = "v${major}.${minor}.${patch + 1}"

    println("Bumping ${project.version} => ${nextVersion}")

    // update file
    def propsFile = file("${rootDir}/gradle.properties")
    def propsText = propsFile.text.replace(project.version, nextVersion)
    propsFile.text = propsText

    // commit
    grgit.add(patterns: ['gradle.properties'])
    grgit.commit(message: "Bump version to ${nextVersion}", sign: false)
    // sign commit
    'git commit --amend --no-edit --allow-empty -s'.execute() // sign commit
}

tasks.register('release') {
    println("Releasing ${project.version}")
    // temp tag, so GitChangelogApi writes the right tag in the changelog
    grgit.tag.add(name: project.version)
    // write changelog
    (new GitChangelogApi())
            .withFromRevision("440bdfdf94c09ef4edf1885b25852078a66d6332")
            .withToRevision("HEAD")
            .withTemplateContent(templateChangelogContent)
            .withFromRepo(System.getProperty("user.dir"))
            .toFile(new File("CHANGELOG.md"))
    // remove temp tag
    grgit.tag.remove(names: [project.version])
    // commit changelog
    grgit.commit(message: "Release ${project.version}", all: true, sign: false)
    // sign commit
    'git commit --amend --no-edit --allow-empty -s'.execute() // sign commit
    // add release tag
    grgit.tag.add(name: project.version)
    println("To publish the commit and tag: git push --atomic origin main ${project.version}")
}

tasks.register('gitFdroidChangelogTask') {
    println("Update Fdroid changelogs ${project.version}")
    def tags = grgit.tag.list()
    tags.each { tag ->
        println tag.name
        def versionCode = calculateAndroidVersionCode(tag.name)
        def file = new File("fastlane/metadata/android/en-US/changelogs/${versionCode}.txt")
        if (!file.exists()) {
            def prev_tag = "git describe --tags --abbrev=0 ${tag.name}^".execute().text.replace("\n", "").replace("\r", "").trim()
            (new GitChangelogApi())
                    .withFromRevision(prev_tag, InclusivenessStrategy.INCLUSIVE)
                    .withToRevision(tag.name)
                    .withTemplateContent(templateFdroidChangelogContent)
                    .withFromRepo(System.getProperty("user.dir"))
                    .toFile(file)
        }
    }
}
