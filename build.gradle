import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
import se.bjurr.gitchangelog.api.InclusivenessStrategy

// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.androidApplication) apply false
    alias(libs.plugins.gitChangelog)
}

def getGitVersion = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    def commitId = stdout.toString().replace("\n", "").replace("\r", "").trim()
    stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '--points-at', commitId
        standardOutput = stdout
    }
    def tagName = stdout.toString().replace("\n", "").replace("\r", "").trim()
    def versionName = 'git-' + commitId
    if (tagName != null && "" != tagName) {
        versionName = tagName
    }
    return versionName
}

def getPrevGitVersion = { tag ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--abbrev=0', tag + '^'
        standardOutput = stdout
    }
    def versionName = tag
    def tagName = stdout.toString().replace("\n", "").replace("\r", "").trim()
    if (tagName != null && "" != tagName) {
        versionName = tagName
    }
    return versionName
}

tasks.register('gitReleaseNotesTask', GitChangelogTask) {
    def version = getGitVersion()
    println "Generating Release notes for " + version
    def prev_version = getPrevGitVersion(version)
    println "Compare to previous " + prev_version
    fromRevisionStrategy = InclusivenessStrategy.EXCLUSIVE
    fromRevision = prev_version
    toRevision = version
    file = new File("${rootDir}/RELEASE_NOTES.md")
    prependToFile = false // false will replace the file, true will prepend content
    templateContent = """{{#tags}}# Release {{name}} ({{tagDate}})

  {{#ifContainsType commits type='feat'}}
## Features

    {{#commits}}
      {{#ifCommitType . type='feat'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://gitlab.com/html-validate/html-validate/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}
  {{#ifContainsType commits type='fix'}}

## Bug Fixes

    {{#commits}}
      {{#ifCommitType . type='fix'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://gitlab.com/html-validate/html-validate/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}

## Full Changelog

https://github.com/ffalt/starfield/compare/PREVIOUS...{{name}}
{{/tags}}
""".replace("PREVIOUS", prev_version)
}

tasks.register('gitChangelogTask', GitChangelogTask) {
    fromRevision = "440bdfdf94c09ef4edf1885b25852078a66d6332"
    toRevision = "HEAD"
    templateContent = """# Changelog Starfield Live Wallpaper
{{#tags}}

{{#ifEquals name "Unreleased"}}
## Unreleased
{{else}}
## [{{name}}](https://github.com/ffalt/starfield/compare/{{name}}) ({{tagDate .}})
{{/ifEquals}}

  {{#ifContainsType commits type='feat'}}
### Features

    {{#commits}}
      {{#ifCommitType . type='feat'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://github.com/ffalt/starfield/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}

  {{#ifContainsType commits type='fix'}}
### Bug Fixes

    {{#commits}}
      {{#ifCommitType . type='fix'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://github.com/ffalt/starfield/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}
{{/tags}}
 """
}
