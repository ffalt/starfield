import java.text.SimpleDateFormat

def getGitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def getAndroidGitDescribe() {
    return "git describe --tags --long".execute().text.trim()
}

def getGitBranch() {
    return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}

def getCurrentCommitId() {
    return "git rev-parse --short HEAD".execute().text.replace("\n", "").replace("\r", "").trim()
}

def getTagByCommitId(commitId) {
    return "git tag --points-at ${commitId}".execute().text.replace("\n", "").replace("\r", "").trim()
}

def getPreviousTagByTagName(tagName) {
    return "git describe --tags --abbrev=0 ${tagName}^".execute().text.replace("\n", "").replace("\r", "").trim()
}

def getLatestGitTagName() {
    return "git describe --abbrev=0 --tags\n".execute().text.trim()
}

def getBuildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

def getFullVersionName() {
    def versionName = "0.0.0.0"
    def (tag, buildNumber, gitSha) = getAndroidGitDescribe().tokenize('-')
    if (tag && tag.startsWith("v")) {
        def version = tag.substring(1)
        if (version.tokenize('.').size() == 3) {
            versionName = version + '.' + buildNumber
        }
    }
    return versionName
}

def getAndroidVersionName() {
    def fullVersionName = getFullVersionName()
    return fullVersionName.substring(0, fullVersionName.lastIndexOf('.'))
}

def getAndroidVersionCode() {
    def (major, minor, patch) = getAndroidVersionName().tokenize('.')
    (major, minor, patch) = [major, minor, patch].collect { it.toInteger() }
    return (major * 1000000) + (minor * 10000) + (patch * 100)
}

/**
 * Returns the latest Git revision as it is
 */
def getCurrentGitRevision() {
    def commitId = getCurrentCommitId()
    def tagName = getTagByCommitId(commitId)
    if (tagName == null) {
        return ""
    }
    return tagName
}

/**
 * Returns the previous Git tag as it is
 */
def getCurrentPrevGitVersion(tagName) {
    if (tagName == "") {
        println(getLatestGitTagName())
        def (tag, buildNumber, gitSha) = getAndroidGitDescribe().tokenize('-')
        return tag
    }
    def revTagName = getPreviousTagByTagName(tagName)
    if (revTagName != null && "" != revTagName) {
        return tagName
    }
    return revTagName
}


ext {
    getAndroidVersionCode = this.&getAndroidVersionCode
    getAndroidVersionName = this.&getAndroidVersionName
    getFullVersionName = this.&getFullVersionName
    getGitBranch = this.&getGitBranch
    getAndroidGitDescribe = this.&getAndroidGitDescribe
    getGitSha = this.&getGitSha
    getBuildTime = this.&getBuildTime
    getCurrentGitRevision = this.&getCurrentGitRevision
    getCurrentPrevGitVersion = this.&getCurrentPrevGitVersion
}

